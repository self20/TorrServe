import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

def freeKeystorePropertiesFile = rootProject.file("free.property")
def freeProperties = new Properties()
freeProperties.load(new FileInputStream(freeKeystorePropertiesFile))

def payKeystorePropertiesFile = rootProject.file("pay.property")
def payProperties = new Properties()
payProperties.load(new FileInputStream(payKeystorePropertiesFile))

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "ru.yourok.torrserve"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 19
        versionName "1.0.19"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    signingConfigs {
        freeRelease {
            keyAlias freeProperties['keyAlias']
            keyPassword freeProperties['keyPassword']
            storeFile rootProject.file(freeProperties['storeFile'])
            storePassword freeProperties['storePassword']
        }
        payRelease {
            keyAlias payProperties['keyAlias']
            keyPassword payProperties['keyPassword']
            storeFile rootProject.file(payProperties['storeFile'])
            storePassword payProperties['storePassword']
        }
    }

    flavorDimensions 'main'
    productFlavors {
        free {
            dimension "main"
            signingConfig signingConfigs.freeRelease
        }
        pay {
            dimension "main"
            signingConfig signingConfigs.payRelease
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'co.zsmb:materialdrawer-kt:1.2.1'

    implementation project(':torrentserver')
    implementation 'com.android.support:support-v4:26.1.0'
    implementation 'com.android.support:support-vector-drawable:26.1.0'
}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            Task copyAndRenameAPKTask = project.task("copyAndRename${variant.name.capitalize()}APK", type: Copy) {
                if (variant.buildType.name == "release") {
                    def directory = "dist/${variant.applicationId}_${variant.flavorName}"
                    def fileName = "TorrServe_${variant.flavorName}-${variant.versionName}.apk"
                    def filePath = "$directory/$fileName"
                    def gitLink = "not implemented"
                    //"https://raw.githubusercontent.com/YouROK/M3U8Loader/1.3.x/${filePath}"

                    println "******* Create update *******"
                    println variant.applicationId
                    println filePath
                    println variant.versionName
                    println variant.buildType.name
                    println variant.flavorName
                    println ""

                    rootProject.file("$directory").mkdir()
                    rootProject.file("$directory/version.json").createNewFile()
                    rootProject.file("$directory/version.json").text = """
{
\t"update": {
\t\t"app_id": "$variant.applicationId ${variant.flavorName}",
\t\t"version_code": "$variant.versionCode",
\t\t"version_name": "${variant.versionName}",
\t\t"build_date": "${new SimpleDateFormat("dd.MM.yyyy").format(new Date())}",
\t\t"link_github": "$gitLink"
\t}
}
"""
                    from output.outputFile.getParent()
                    into rootProject.file(directory)
                    include output.outputFileName
                    rename(output.outputFileName, fileName)
                }
            }

            // if copyAndRenameAPKTask needs to automatically execute assemble before
            copyAndRenameAPKTask.dependsOn(variant.assemble)
            copyAndRenameAPKTask.mustRunAfter(variant.assemble)

            // if assemble needs to automatically execute copyAndRenameAPKTask after
            variant.assemble.finalizedBy(copyAndRenameAPKTask)
        }
    }
}